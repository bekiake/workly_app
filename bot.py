import asyncio
import os
import sys
import logging
from datetime import datetime

# Logging sozlamalari
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Bot uchun path qo'shish
bot_root = os.path.dirname(os.path.abspath(__file__))
# Bot root papkada bo'lganligimiz uchun app papkasiga yo'l
app_path = os.path.join(bot_root, "app")
bot_app_path = os.path.join(bot_root, "app", "bot")
sys.path.insert(0, bot_root)  # Root directory
sys.path.insert(0, app_path)  # app directory
sys.path.insert(0, bot_app_path)  # app/bot directory

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

# Bot modullari
from app.bot.middlewares.db import DataBaseSession
from app.bot.middlewares.logging import LoggingMiddleware, DetailedLoggingMiddleware
from app.bot.common.bot_cmds_list import private, admin

# Database engine import qilish
try:
    from app.bot.database.engine import session_maker
    print("‚úÖ Database engine import qilindi")
except ImportError as e:
    print(f"‚ùå Database engine import xatosi: {e}")
    session_maker = None

# Test connection funksiyasini alohida import qilish
async def test_db_connection():
    """Database connection test"""
    if not session_maker:
        print("‚ùå Session maker mavjud emas")
        return False
    
    try:
        from sqlalchemy import text
        async with session_maker() as session:
            await session.execute(text("SELECT 1"))
        print("‚úÖ Database connection muvaffaqiyatli")
        return True
    except Exception as e:
        print(f"‚ùå Database connection xatosi: {e}")
        return False

# Handlers
from app.bot.handlers.user_private import user_private_router
from app.bot.handlers.admin_private import admin_router

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤
try:
    from app.bot.utils.scheduler import DailyReportScheduler
except ImportError:
    DailyReportScheduler = None
    print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

ALLOWED_UPDATES = ['message', 'edited_message', 'callback_query']

# Bot tokenini tekshirish
bot_token = os.getenv('BOT_TOKEN', "7979956333:AAFUrZuOTgZ9L8-ygchRYBz0p2FKB9KUokk")
if not bot_token:
    print("‚ùå BOT_TOKEN .env faylida topilmadi!")
    print("üìù .env fayliga BOT_TOKEN=your_token_here qo'shing")
    exit(1)

# Yangi aiogram 3.7.0+ versiyasi uchun
bot = Bot(
    token=bot_token,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)
bot.my_admins_list = [1210278389]

dp = Dispatcher()

# Middlewares ni qo'shish (tartib muhim!)
dp.message.middleware(LoggingMiddleware())
dp.callback_query.middleware(LoggingMiddleware())
dp.update.middleware(DataBaseSession(session_pool=session_maker))

dp.include_router(user_private_router)
dp.include_router(admin_router)

async def on_startup(bot):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    connection_ok = await test_db_connection()
    if not connection_ok:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ workly_app –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ —Ö–æ—Ç—è –±—ã —Ä–∞–∑")
        print("2. DATABASE_URL –≤ .env –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î workly_app")
    logger.info("üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î workly_app")

async def on_shutdown(bot):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    print('–±–æ—Ç –ª–µ–≥')

async def main():
    try:
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        # Webhook o'chirish
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Webhook: {e}")

        # Comandalar o'rnatish
        try:
            await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())
            logger.info("üìã –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã: {e}")

        # Admin comandalar
        try:
            for admin_id in bot.my_admins_list:
                await bot.set_my_commands(commands=admin, scope=types.BotCommandScopeChat(chat_id=admin_id))
            logger.info(f"üëë –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã: {e}")

        # Polling boshlash
        logger.info("üöÄ Polling –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üöÄ –ë–æ—Ç –∏—à–≥–∞ —Ç—É—à–¥–∏!")
        
        await dp.start_polling(
            bot, 
            allowed_updates=ALLOWED_UPDATES,
            polling_timeout=10,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"‚ùå –ë–æ—Ç –∏—à–≥–∞ —Ç—É—à–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üëã –ë–æ—Ç —Ç—û—Ö—Ç–∞—Ç–∏–ª–¥–∏")
