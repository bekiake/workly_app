import logging
from datetime import datetime
from typing import Callable, Dict, Any, Awaitable, Union

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update, User


logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery, Update], Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery, Update],
        data: Dict[str, Any]
    ) -> Any:
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ–±—ã—Ç–∏–∏
        user_info = self._get_user_info(event)
        event_info = self._get_event_info(event)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        logger.info(f"üì• –í–•–û–î–Ø–©–ï–ï: {event_info} –æ—Ç {user_info}")
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = datetime.now()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º handler
            result = await handler(event, data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.info(f"‚úÖ –û–ë–†–ê–ë–û–¢–ê–ù–û: {event_info} –∑–∞ {processing_time:.3f}—Å")
            
            return result
            
        except Exception as e:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏
            processing_time = (datetime.now() - start_time).total_seconds()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {event_info} –∑–∞ {processing_time:.3f}—Å - {str(e)}")
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            raise
    
    def _get_user_info(self, event: Union[Message, CallbackQuery, Update]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ Message –æ–±—ä–µ–∫—Ç
        if isinstance(event, Message):
            user = event.from_user
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery –æ–±—ä–µ–∫—Ç
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        # –ï—Å–ª–∏ —ç—Ç–æ Update –æ–±—ä–µ–∫—Ç
        elif isinstance(event, Update):
            if event.message:
                user = event.message.from_user
            elif event.callback_query:
                user = event.callback_query.from_user
            elif event.inline_query:
                user = event.inline_query.from_user
        
        if user:
            username = f"@{user.username}" if user.username else "–±–µ–∑_username"
            full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            return f"üë§ {full_name} ({username}, ID:{user.id})"
        
        return "üë§ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    def _get_event_info(self, event: Union[Message, CallbackQuery, Update]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏"""
        
        # –ï—Å–ª–∏ —ç—Ç–æ Message –æ–±—ä–µ–∫—Ç
        if isinstance(event, Message):
            return self._format_message_info(event)
        
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery –æ–±—ä–µ–∫—Ç
        elif isinstance(event, CallbackQuery):
            data = event.data[:30] + "..." if len(event.data) > 30 else event.data
            return f"ÔøΩ Callback: '{data}'"
        
        # –ï—Å–ª–∏ —ç—Ç–æ Update –æ–±—ä–µ–∫—Ç
        elif isinstance(event, Update):
            if event.message:
                return self._format_message_info(event.message)
            elif event.callback_query:
                callback = event.callback_query
                data = callback.data[:30] + "..." if len(callback.data) > 30 else callback.data
                return f"üîò Callback: '{data}'"
            elif event.inline_query:
                query = event.inline_query.query
                query_text = query[:30] + "..." if len(query) > 30 else query
                return f"üîç Inline –∑–∞–ø—Ä–æ—Å: '{query_text}'"
        
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
    
    def _format_message_info(self, msg: Message) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if msg.text:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = msg.text[:50] + "..." if len(msg.text) > 50 else msg.text
            return f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{text}'"
        elif msg.photo:
            return "üì∑ –§–æ—Ç–æ"
        elif msg.document:
            return f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {msg.document.file_name}"
        elif msg.voice:
            return "üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif msg.location:
            return "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
        else:
            return "üìù –î—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"


class DetailedLoggingMiddleware(LoggingMiddleware):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π middleware —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    async def __call__(
        self,
        handler: Callable[[Union[Message, CallbackQuery, Update], Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery, Update],
        data: Dict[str, Any]
    ) -> Any:
        
        # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        result = await super().__call__(handler, event, data)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        await self._log_special_events(event)
        
        return result
    
    async def _log_special_events(self, event: Union[Message, CallbackQuery, Update]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º Message –æ–±—ä–µ–∫—Ç
        msg = None
        callback = None
        
        if isinstance(event, Message):
            msg = event
        elif isinstance(event, CallbackQuery):
            callback = event
        elif isinstance(event, Update):
            msg = event.message
            callback = event.callback_query
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if msg and msg.text and msg.text.startswith('/'):
            command = msg.text.split()[0]
            logger.info(f"ü§ñ –ö–û–ú–ê–ù–î–ê: {command}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if msg and msg.from_user and msg.text:
            if any(word in msg.text.lower() for word in ['admin', 'report', 'stats']):
                logger.info(f"üëë –ê–î–ú–ò–ù –î–ï–ô–°–¢–í–ò–ï: {msg.text[:100]}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º callback –æ—Ç –∞–¥–º–∏–Ω–æ–≤
        if callback and callback.data:
            if any(word in callback.data for word in ['admin', 'report', 'stats']):
                logger.info(f"üëë –ê–î–ú–ò–ù CALLBACK: {callback.data}")
