from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import date, datetime, timedelta
import os

from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter, IsAdmin
from database.orm_query import orm_get_daily_attendance_report
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
try:
    from utils.reports import format_daily_report, format_summary_stats
    from utils.scheduler import send_test_report
except ImportError:
    def format_daily_report(data):
        return "–û—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    def format_summary_stats(data):
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    async def send_test_report(bot, group_id):
        pass



admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())




@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    await message.answer(
        "üë®‚Äçüíº –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìä /report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìÖ /report_date YYYY-MM-DD - –û—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "üìà /week_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üß™ /test_report - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É\n"
        "‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    )


@admin_router.message(Command("test_report"))
async def test_group_report(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É"""
    group_chat_id = os.getenv('REPORTS_GROUP_ID')
    if not group_chat_id:
        await message.answer("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REPORTS_GROUP_ID –≤ .env")
        return
    
    try:
        bot = message.bot
        await send_test_report(bot, group_chat_id)
        await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_chat_id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@admin_router.message(Command("report"))
async def daily_report_today(message: types.Message, session: AsyncSession):
    """–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        report_data = await orm_get_daily_attendance_report(session)
        report_text = format_daily_report(report_data)
        await message.answer(report_text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@admin_router.message(Command("report_date"))
async def daily_report_date(message: types.Message, session: AsyncSession):
    """–û—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report_date YYYY-MM-DD\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /report_date 2025-09-11"
            )
            return
        
        date_str = command_parts[1]
        report_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        
        report_data = await orm_get_daily_attendance_report(session, report_date)
        report_text = format_daily_report(report_data)
        await message.answer(report_text)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-09-11"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@admin_router.message(Command("week_stats"))
async def week_statistics(message: types.Message, session: AsyncSession):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        today = date.today()
        week_stats = []
        
        for i in range(7):
            report_date = today - timedelta(days=i)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
            if report_date.weekday() < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
                report_data = await orm_get_daily_attendance_report(session, report_date)
                stats_line = format_summary_stats(report_data)
                week_stats.append(stats_line)
        
        message_text = "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ\n\n" + "\n".join(week_stats)
        await message.answer(message_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

