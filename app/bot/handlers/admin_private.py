from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile
from datetime import date, datetime, timedelta
import os
import calendar

from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter, IsAdmin
from database.orm_query import orm_get_daily_attendance_report
from kbds.inline import get_admin_reports_keyboard, get_month_selection_keyboard

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
try:
    from utils.reports import format_daily_report, format_summary_stats
except ImportError:
    def format_daily_report(data):
        return "–û—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    def format_summary_stats(data):
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
try:
    from app.services.reports import generate_detailed_monthly_report, generate_monthly_report
except ImportError:
    async def generate_detailed_monthly_report(session, year, month):
        return None
    async def generate_monthly_report(session, year, month):
        return None

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    await message.answer(
        "üë®‚Äçüíº <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìä /report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìÖ /report_date YYYY-MM-DD - –û—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "üìà /week_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üìã /reports - Excel –æ—Ç—á–µ—Ç—ã\n"
        "‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
        parse_mode="HTML"
    )


@admin_router.message(Command("report"))
async def daily_report_today(message: types.Message, session: AsyncSession):
    """–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        report_data = await orm_get_daily_attendance_report(session)
        report_text = format_daily_report(report_data)
        await message.answer(report_text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@admin_router.message(Command("report_date"))
async def daily_report_date(message: types.Message, session: AsyncSession):
    """–û—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report_date YYYY-MM-DD\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /report_date 2025-09-11"
            )
            return
        
        date_str = command_parts[1]
        report_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        
        report_data = await orm_get_daily_attendance_report(session, report_date)
        report_text = format_daily_report(report_data)
        await message.answer(report_text)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-09-11"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@admin_router.message(Command("week_stats"))
async def week_statistics(message: types.Message, session: AsyncSession):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        today = date.today()
        week_stats = []
        
        for i in range(7):
            report_date = today - timedelta(days=i)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
            if report_date.weekday() < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
                report_data = await orm_get_daily_attendance_report(session, report_date)
                stats_line = format_summary_stats(report_data)
                week_stats.append(stats_line)
        
        message_text = "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ\n\n" + "\n".join(week_stats)
        await message.answer(message_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# ============== EXCEL –û–¢–ß–ï–¢–´ ==============

@admin_router.message(Command("reports"))
async def admin_reports_panel(message: Message, session: AsyncSession):
    """–ü–∞–Ω–µ–ª—å Excel –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    await message.answer(
        "üìä <b>–ü–ê–ù–ï–õ–¨ EXCEL –û–¢–ß–ï–¢–û–í</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel:\n\n"
        "‚Ä¢ <b>–ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç</b> - —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n"
        "‚Ä¢ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç</b> - —Å —Ä–∞—Å—á–µ—Ç–æ–º –∑–∞—Ä–ø–ª–∞—Ç –∏ —à—Ç—Ä–∞—Ñ–æ–≤\n\n"
        "üí∞ <i>–í –ø–æ–¥—Ä–æ–±–Ω–æ–º –æ—Ç—á–µ—Ç–µ —à—Ç—Ä–∞—Ñ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1% –æ—Ç –º–µ—Å—è—á–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–ø–æ–∑–¥–∞–Ω–∏—è</i>",
        reply_markup=get_admin_reports_keyboard(),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data == "admin_reports")
async def admin_reports_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    await callback.message.edit_text(
        "üìä <b>EXCEL –û–¢–ß–ï–¢–´</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\n"
        "‚Ä¢ <b>–ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç</b> - —Ç–æ–ª—å–∫–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n"
        "‚Ä¢ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç</b> - —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏\n\n"
        "üí° <i>–®—Ç—Ä–∞—Ñ: 1% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–ø–æ–∑–¥–∞–Ω–∏—è</i>",
        reply_markup=get_month_selection_keyboard(current_year, current_month),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data.startswith("report_"))
async def handle_report_generation(callback: CallbackQuery, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–æ–≤"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: report_type_year_month
    data_parts = callback.data.split("_")
    report_type = data_parts[1]  # "detailed" –∏–ª–∏ "simple"
    year = int(data_parts[2])
    month = int(data_parts[3])
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    month_names = [
        "", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    month_name_ru = month_names[month]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        f"‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç...</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {month_name_ru} {year}\n"
        f"üìä –¢–∏–ø: {'–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏' if report_type == 'detailed' else '–ü—Ä–æ—Å—Ç–æ–π'}\n\n"
        f"‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if report_type == "detailed":
            file_path = await generate_detailed_monthly_report(session, year, month)
            report_name = f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {month_name_ru} {year}"
            description = "—Å —Ä–∞—Å—á–µ—Ç–æ–º –∑–∞—Ä–ø–ª–∞—Ç –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏—è"
        else:
            file_path = await generate_monthly_report(session, year, month)
            report_name = f"–û—Ç—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {month_name_ru} {year}"
            description = "–ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if not file_path or not os.path.exists(file_path):
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = FSInputFile(file_path)
        await callback.message.answer_document(
            document,
            caption=f"üìä <b>{report_name}</b>\n\n"
                   f"üìÖ –ü–µ—Ä–∏–æ–¥: {month_name_ru} {year}\n"
                   f"üìã –¢–∏–ø: {description}\n"
                   f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                   f"üí∞ {'–®—Ç—Ä–∞—Ñ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ: 1% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' if report_type == 'detailed' else '–î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'}",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ <b>–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìä {report_name}\n"
            f"üìã {description.capitalize()}\n\n"
            f"üìé –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ ‚¨ÜÔ∏è\n\n"
            f"üîÑ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
            parse_mode="HTML"
        )

@admin_router.callback_query(F.data.startswith("change_period_"))
async def change_report_period(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: change_period_year_month_direction
    data_parts = callback.data.split("_")
    year = int(data_parts[2])
    month = int(data_parts[3])
    direction = data_parts[4]  # "prev" –∏–ª–∏ "next"
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥
    if direction == "prev":
        if month == 1:
            year -= 1
            month = 12
        else:
            month -= 1
    else:  # next
        if month == 12:
            year += 1
            month = 1
        else:
            month += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "üìä <b>EXCEL –û–¢–ß–ï–¢–´</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\n"
        "‚Ä¢ <b>–ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç</b> - —Ç–æ–ª—å–∫–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n"
        "‚Ä¢ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç</b> - —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏\n\n"
        "üí° <i>–®—Ç—Ä–∞—Ñ: 1% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–ø–æ–∑–¥–∞–Ω–∏—è</i>",
        reply_markup=get_month_selection_keyboard(year, month),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    await callback.message.edit_text(
        "üìà <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ /report - –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /week_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ /reports - Excel –æ—Ç—á–µ—Ç—ã",
        parse_mode="HTML"
    )

@admin_router.message(Command("settings"))
async def admin_settings(message: types.Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –®—Ç—Ä–∞—Ñ—ã –∏ –±–æ–Ω—É—Å—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
        parse_mode="HTML"
    )
