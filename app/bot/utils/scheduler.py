import asyncio
import os
from datetime import datetime, time
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from database.engine import session_maker
from database.orm_query import orm_get_daily_attendance_report
from utils.reports import format_daily_report


class DailyReportScheduler:
    def __init__(self, bot: Bot, group_chat_id: str):
        self.bot = bot
        self.group_chat_id = group_chat_id
        self.report_time = time(18, 0)  # 18:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        
    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É"""
        try:
            async with session_maker() as session:
                report_data = await orm_get_daily_attendance_report(session)
                report_text = format_daily_report(report_data)
                
                await self.bot.send_message(
                    chat_id=self.group_chat_id,
                    text=report_text
                )
                
                print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {self.group_chat_id}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    async def schedule_daily_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        while True:
            now = datetime.now()
            current_time = now.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
            if (current_time.hour == self.report_time.hour and 
                current_time.minute == self.report_time.minute and
                now.weekday() < 5):  # –¢–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ü–Ω-–ü—Ç)
                
                await self.send_daily_report()
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
                await asyncio.sleep(60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        asyncio.create_task(self.schedule_daily_reports())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def send_test_report(bot: Bot, group_chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
    try:
        async with session_maker() as session:
            report_data = await orm_get_daily_attendance_report(session)
            report_text = format_daily_report(report_data)
            
            await bot.send_message(
                chat_id=group_chat_id,
                text=f"üß™ –¢–ï–°–¢–û–í–´–ô –û–¢–ß–ï–¢\n\n{report_text}"
            )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_chat_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")